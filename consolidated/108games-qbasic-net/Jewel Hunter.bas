'***Important***
'If you don't have a joystick then go down 7 screens from the top and
'change joystick$="yes" to joystick$="no"

'JEWEL HUNTER ONLY COSTS 2 DOLLARS

'Email me at:
'jameshes@seidata.com

'My homepage is at:
'www.geocities.com\SiliconValley\Park\6074

'Register Jewel Hunter by sending 2 dollars to:
'John Hess
'5999 St. Rt. 48
'Lawrenceburg IN  47025



REM new stuff
'I've merged it all to one file, that way you don't have to change anything
'More levels (3 to be exact)
'Cleaned up the code
'Runs with about 10k less memory

DECLARE SUB menu ()
DECLARE SUB grabimage ()
DECLARE SUB checkmap (flagswitch!, health!, points!, win!, dotxold!, dotyold!)
DECLARE SUB drawscreen ()
DECLARE SUB title ()
DECLARE SUB status ()
DECLARE SUB rotatecolor (rotateindex!)
DECLARE SUB score (points!, health!, win!)
DECLARE SUB winner ()
DECLARE SUB calibrate (joystick$, joymax!, joymin!)
DECLARE SUB makepalette ()
DECLARE SUB iniletter ()
DECLARE SUB printg (sentence$, x!, y!, scale!, c!, flagshade!)
DECLARE SUB kbhit ()
DECLARE SUB makecolors ()
DECLARE SUB ending ()
DECLARE SUB readmap (win!)
DECLARE SUB checkstick (dotxold!, dotyold!, wayx!, wayy!, land!, frame!, flagjump!, joymax!, joymin!)
DECLARE SUB jump (jumpcount!, flagjump!)
DECLARE SUB erasedot (dotxold!, dotyold!)
DECLARE SUB drawdot (dotxold!, dotyold!, wayx!, wayy!, frame!)
DECLARE SUB checkwall (wayx!, wayy!, land!)
DECLARE SUB nextlevel (win!)
DECLARE SUB choices ()


REM general game arrays

    DIM SHARED value(0 TO 300)
    DIM SHARED letter(0 TO 6080)
    DIM SHARED map(0 TO 100, 0 TO 100)
    DIM SHARED flagblockx(0 TO 10, 0 TO 10)
    DIM SHARED flagblocky(0 TO 10, 0 TO 10)
    DIM SHARED switchx(0 TO 100)
    DIM SHARED switchy(0 TO 100)
    DIM SHARED amountblock(0 TO 20)
 
REM ship arrays

    COMMON SHARED shipwayx
    COMMON SHARED shipx
    COMMON SHARED shipxold
    COMMON SHARED shipgrafx
    COMMON SHARED shipgrafy

REM game graphics
   
    DIM SHARED blank(0 TO 7)
    DIM SHARED block(0 TO 7)
    DIM SHARED bonus(0 TO 7)
    DIM SHARED greencross(0 TO 7)
    DIM SHARED redblock(0 TO 7)
    DIM SHARED hlava(0 TO 7)
    DIM SHARED vlava(0 TO 7)
    DIM SHARED switchon(0 TO 7)
    DIM SHARED switchoff(0 TO 7)
    DIM SHARED hgreen(0 TO 7)
    DIM SHARED vgreen(0 TO 7)
    DIM SHARED urgreen(0 TO 7)
    DIM SHARED lrgreen(0 TO 7)
    DIM SHARED llgreen(0 TO 7)
    DIM SHARED ulgreen(0 TO 7)
    DIM SHARED greenstop(0 TO 7)
    DIM SHARED bridge(0 TO 7)
    DIM SHARED rslide(0 TO 7)
    DIM SHARED lslide(0 TO 7)
    DIM SHARED hover(0 TO 7)
    DIM SHARED rlava(0 TO 7)

REM ini values

    COMMON SHARED maxx
    COMMON SHARED maxy
    COMMON SHARED mapx
    COMMON SHARED mapy
    COMMON SHARED centerx
    COMMON SHARED centery
    COMMON SHARED flagstop
    COMMON SHARED dotx
    COMMON SHARED doty
    COMMON SHARED levelnumber
    COMMON SHARED joystick$
    COMMON SHARED nolevels

REM ini all game variables
   
    maxx = 18
    maxy = 18
    mapx = 18
    mapy = 15
    centerx = 110 '115
    centery = 45
    dotx = 160
    doty = 100
    dotxold = dotx
    dotyold = doty
    levelnumber = 1


    CONST wallcolor = 60
    health = 100

    shipx = 0
    shipwayx = 1
    shipxold = 0

' joystick$ = "yes" if you have a joystick
' joystick$ = "no"  if you don't have a joystick

joystick$ = "yes"


'*******************************ANY HELP WOULD BE APPRECIATED**************
REM problems***
'It just won't compile...It runs out of memory
'tried clear
'tried getting rid of letter gfx
'only runs in qb or quickbasic


    SCREEN 13
   
    CALL makecolors
           
    CALL makepalette

    CALL iniletter


REM start of game after all ini of subs

REM grab game images

    CALL grabimage

REM Joystick calibrator
  
    CALL calibrate(joystick$, joymax, joymin)

REM title

    CALL title

    CALL menu

REM read in map

    CALL readmap(win)

    nolevels = 3

REM status

    CALL status

REM ini screen

    flagstop = 0  'stops screen from going anywhere

    CALL drawscreen

    flagstop = 1

main:
 
REM gets joystick and keyboard values

    CALL checkstick(dotxold, dotyold, wayx, wayy, land, frame, flagjump, joymax, joymin)

REM jumps until it hits something
   
    CALL jump(jumpcount, flagjump)

REM checks for walls for jump and walking

    CALL checkwall(wayx, wayy, land)

REM rotates the red colors

    CALL rotatecolor(rotateindex)
   
REM erase the guy before it draws him to minimize flicker

    CALL erasedot(dotxold, dotyold)

REM draws the guy right after it erases him to minimize flicker

    CALL drawdot(dotxold, dotyold, wayx, wayy, frame)
   
REM checks the map for any items or lava

    CALL checkmap(flagswitch, health, points, win, dotxold, dotyold)

REM updates the score

    CALL score(points, health, win)

GOTO main


REM font data (and there is a lot of it)
REM (80 in each line)
REM (0's represent off pixels)
REM (1's represent on pixels)
REM (generated off of the system fonts)
REM * A good idea would be RLE(run length encoding) *

REM map data is beneath the font data

DATA 0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0
DATA 0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1
DATA 0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0
DATA 1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0
DATA 1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0
DATA 1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0
DATA 1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0



REM add 20 to switch values
REM map
REM 60 by 40

REM ******************************level 1****************************

DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,10,10,10,10,10,10,45,40,40,40,42,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,99,99,99,99,99,99,10,10,41,51,51,51,44,42,10,99,99,99,10,99,10,99,10,99,10,99,10,99,10,99,10,99,10,99,10,10,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,99,99,99,99,99,99,99,10,44,40,42,51,51,41,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,99,20,99,99,99,99,99,99,99,99,10,10,10,99,10,10,10,10,10,10,10,10
DATA 10,10,99,99,99,99,99,99,99,99,10,10,44,40,40,43,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,13,13,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10
DATA 10,10,99,99,99,99,99,99,99,99,99,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,99,99,13,99,13,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10
DATA 10,10,99,99,99,99,70,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,70,99,99,99,99,99,99,99,99,99,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10
DATA 10,10,10,45,46,99,46,42,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,13,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10
DATA 10,10,10,41,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,45,40,42,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,12,12,12,12,99,99,99,99,99,99,10,10,10
DATA 10,10,10,41,99,99,99,41,60,99,99,99,99,99,99,99,99,99,10,10,10,10,99,99,99,99,99,99,99,41,51,41,99,20,20,99,99,99,99,99,99,99,99,99,99,99,12,12,11,11,12,12,99,99,99,99,99,10,10,10
DATA 10,10,20,41,12,12,12,41,12,60,99,99,99,99,99,99,10,10,10,10,10,10,99,99,99,99,99,99,99,41,51,44,42,10,10,46,99,99,99,99,99,99,99,13,99,99,12,11,10,10,11,12,12,99,99,99,99,10,10,10
DATA 10,10,10,44,40,40,40,43,10,10,10,46,51,51,51,46,10,10,10,10,10,10,10,99,99,99,99,99,99,41,51,51,41,10,10,10,46,99,99,99,99,99,99,99,99,99,12,11,11,11,11,11,12,12,12,99,99,10,10,10
DATA 10,10,10,10,10,10,10,10,10,10,10,44,42,51,51,44,40,40,40,40,42,10,10,99,99,99,99,99,99,41,51,51,44,42,10,10,46,99,99,99,99,99,13,99,99,99,12,12,12,12,12,12,12,10,12,99,99,10,10,10
DATA 10,10,10,10,10,10,10,10,10,10,10,10,44,42,51,51,51,51,51,51,41,10,10,10,10,10,46,10,46,41,51,51,51,41,10,10,10,46,99,99,99,99,99,99,99,99,12,12,10,99,99,99,12,10,12,99,99,10,10,10
DATA 10,10,10,10,10,10,10,10,10,10,10,10,10,41,51,51,51,51,51,51,41,10,10,10,10,10,99,99,99,41,51,51,51,41,10,10,10,10,46,40,40,40,40,40,40,46,12,12,99,99,99,99,12,12,12,99,99,10,10,10
DATA 10,99,99,99,99,10,10,10,10,10,10,10,10,44,40,40,42,51,51,51,41,10,10,10,10,99,99,99,99,44,40,40,40,43,10,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,99,10,99,99,99,10,10,10
DATA 10,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,44,40,40,40,43,10,10,10,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,10,99,99,10,10,10,10,10,10,10,99,99,99,99,99,10,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,46,99,99,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10
DATA 11,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,10,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,11,10,10,10,10,10,99,20,99,99,99,10,99,99,99,99,99,99,10,10,10
DATA 10,10,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,46,51,51,51,51,51,51,46,99,99,10,10,10
DATA 10,99,99,99,99,46,42,99,99,99,20,99,41,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,46,51,51,51,51,46,10,99,99,10,10,10
DATA 10,99,99,99,99,99,44,42,51,51,51,51,41,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,46,51,51,46,10,10,99,99,10,10,10
DATA 10,99,99,99,99,99,99,44,40,40,40,40,43,99,99,99,99,99,99,99,99,99,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,46,46,10,10,10,99,99,10,10,10
DATA 10,99,99,13,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,99,99,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,10,10,10
DATA 10,13,99,99,99,99,99,99,99,99,99,99,99,99,99,46,51,51,51,51,46,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,10,41,51,51,51,51,44,40,42,10,99,99,99,20,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10
DATA 10,99,99,13,99,99,99,99,99,99,99,13,99,10,10,41,51,51,51,51,51,51,41,10,99,99,99,10,10,10,10,99,99,20,99,99,99,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,10,10,10,41,51,51,51,51,51,51,41,10,99,99,99,99,10,10,99,99,99,10,99,99,99,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10
DATA 10,99,99,99,61,11,60,99,99,99,13,99,10,10,10,44,40,40,40,40,40,40,43,10,99,99,99,99,99,10,99,99,10,10,10,99,99,10,10,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10
DATA 10,99,99,61,99,11,99,60,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10
DATA 10,99,61,99,99,11,99,99,60,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,10,10,45,40,40,40,42,10,10,10,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,61,99,99,99,11,99,99,99,60,99,99,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,10,10,41,51,51,51,41,10,10,10,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,99,99,99,99,99,10,10,41,51,51,51,41,10,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,10,99,99,99,99,99,99,99,99,99,10,99,99,10,10,10,10,10,10,10,99,99,99,99,99,10,10,44,40,40,40,43,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,10,10,10,99,99,99,20,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,71,99,99,99,99,99,99,99,99,99,99,99,99,99,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
                                                                                    
REM switch 1
DATA 7
DATA 23,28
DATA 23,29
DATA 23,30
DATA 23,32
DATA 23,33
DATA 23,34
DATA 23,35
            
REM switch 2
DATA 1
DATA 48,34
            
REM switch 3
DATA 3
DATA 49,56
DATA 45,52
DATA 47,49

REM *******************************Level 2****************************


DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,46,10,10,10,99,20,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,20,99,10
DATA 10,99,99,99,99,10,99,99,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,61,10,10,10
DATA 10,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,10
DATA 10,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,10
DATA 10,99,99,46,99,10,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,10
DATA 10,99,99,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,20,99,99,99,99,61,99,99,99,99,99,99,10
DATA 10,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,99,46,40,40,40,40,40,46,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,80,99,99,99,99,99,80,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,12,99,99,99,99,99,99,10
DATA 10,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,12,12,99,99,99,99,99,99,10
DATA 10,99,99,46,99,10,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,12,12,12,99,99,99,99,99,10
DATA 10,99,99,99,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,13,99,99,99,12,12,12,12,12,99,99,99,99,10
DATA 10,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,20,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,70,99,71,99,41,46,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,46,40,40,40,40,43,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,13,99,99,13,99,99,13,99,99,99,99,99,99,99,99,99,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,71,99,99,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,13,13,13,46,40,40,42,10,10,10,10,10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,13,10
DATA 10,99,99,99,46,46,99,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,20,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,41,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,20,99,99,99,99,99,99,99,45,40,40,40,40,42,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,13,41,41,99,99,99,99,99,99,99,20,99,99,99,99,99,20,99,99,99,99,44,40,40,40,46,99,99,99,99,41,99,50,50,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,41,41,99,99,99,99,99,46,40,40,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,44,40,50,50,40,43,99,99,99,99,13,99,99,99,99,13,99,99,99,99,46,11,11,11,46,99,10
DATA 10,20,99,99,41,41,99,99,99,99,99,80,99,99,80,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,80,99,99,99,80,99,10
DATA 11,10,10,10,46,46,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,10


REM switch 1
DATA 3
DATA 42,49
DATA 42,50
DATA 42,51

DATA 3
DATA 43,49
DATA 43,50
DATA 43,51

DATA 4
DATA 38,58
DATA 39,58
DATA 40,58
DATA 41,58

REM ****************************level 3**********************

DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,46,40,42,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,20,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,46,99,99,99,99,99,99,20,70,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,60,99,99,99,99,99,99,99,45,40,40,40,40,42,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,46,99,99,99,99,46,40,40,40,46,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,60,99,99,99,99,99,99,41,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,20,99,99,99,60,99,99,99,99,99,41,99,50,50,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,46,99,99,99,99,99,99,99,99,99,99,99,99,46,99,99,99,99,99,99,99,10,46,10,99,99,99,60,99,99,99,99,44,40,50,50,40,43,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,60,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,60,99,99,99,99,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,60,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,60,99,99,99,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,60,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,60,99,99,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,60,99,99,99,99,99,61,99,99,99,99,99,99,99,99,20,99,99,99,99,99,99,99,99,99,99,99,60,99,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,46,40,40,40,40,40,46,99,99,99,99,99,99,99,99,99,99,60,99,50,50,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,60,50,50,99,99,99,99,20,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,52,50,99,99,99,46,46,99,99,99,99,99,99,99,99,99,99,70,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,52,99,99,99,80,80,99,99,99,99,99,45,42,10,10,45,42,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,45,40,40,40,40,42,99,52,99,99,99,99,99,99,99,99,99,41,41,99,99,41,41,99,10
DATA 10,99,99,99,99,99,99,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,10,10,10,10,41,99,99,52,99,99,99,46,99,99,99,99,41,41,99,99,41,41,99,10
DATA 10,99,99,99,99,99,99,99,99,61,41,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,45,40,40,42,41,99,99,99,52,51,51,41,99,13,13,99,41,41,99,99,41,44,40,42
DATA 10,99,99,99,99,99,99,99,61,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,41,41,99,99,99,44,40,40,43,99,99,99,99,41,41,99,99,41,10,10,41
DATA 10,99,99,99,99,99,99,61,20,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,41,41,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,44,42,10,41
DATA 10,99,99,99,99,99,61,46,40,40,43,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,41,44,40,40,40,42,99,99,99,99,99,99,99,41,41,99,99,99,41,10,41
DATA 10,99,99,99,99,61,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,44,40,40,40,42,41,51,51,51,51,51,51,51,41,41,99,99,99,41,10,41
DATA 10,99,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,99,99,99,99,41,41,51,51,51,51,51,51,51,41,41,99,99,99,44,42,41
DATA 10,99,99,61,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,99,99,99,99,41,41,51,51,51,51,51,51,51,41,41,99,99,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,99,99,99,99,41,44,40,40,40,40,40,40,40,43,41,99,99,99,99,41,41
DATA 10,13,99,99,99,99,99,99,99,13,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,44,42,99,99,46,99,99,44,40,40,40,40,40,40,40,40,42,44,40,42,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,10,41,99,99,46,99,99,99,99,99,99,99,99,99,99,99,44,42,10,41,99,99,41,41
DATA 10,99,99,99,70,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,45,43,99,99,45,42,99,99,99,99,99,99,99,99,99,99,99,44,40,43,46,99,41,41
DATA 46,40,40,40,40,40,40,46,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41,99,99,99,41,41,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,45,40,40,40,40,40,40,40,40,40,40,43,41,99,99,99,41,44,40,40,40,40,40,40,40,42,99,99,99,99,99,99,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,10,10,10,45,40,40,40,40,40,40,40,43,99,99,99,44,40,40,40,40,42,10,10,10,44,40,42,99,99,99,99,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,13,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,46,40,40,43,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,10,10,10,10,10,44,42,99,99,99,99,99,41,41
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,41,99,99,99,99,99,99,99,99,99,99,99,99,99,46,99,99,99,99,99,46,41,10,10,10,10,10,10,44,42,51,51,45,40,43,41
DATA 10,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,41,99,99,99,99,99,99,99,99,99,99,99,99,99,46,51,51,51,51,51,46,41,10,10,10,10,10,10,10,44,40,40,43,10,10,41
DATA 10,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,41,99,20,20,99,99,46,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43,10,10,10,10,10,10,10,10,10,10,10,10,10,41
DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,44,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43


REM switch 1
DATA 3
DATA 31,29
DATA 32,29
DATA 33,29

REM switch 2
DATA 2
DATA 75,39
DATA 76,39

DATA 3
DATA 30,42
DATA 29,43
DATA 28,44


REM blank map

DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 10,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,10
DATA 11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10

SUB calibrate (joystick$, joymax, joymin)
REM calibrates the joystick
REM and returns the max x and max y
REM also lower cases the joystick$

joystick$ = LCASE$(joystick$)

IF joystick$ = "yes" THEN

   CLS

   PAINT (0, 0), 60, 60

   CALL printg("Joystick", 160, 20, 3, 145, 1)

   CALL printg("Calibrator", 160, 180, 3, 145, 1)

   CALL printg("Leave Joystick in Center", 157, 90, 1, 85, 1)

   CALL printg("and Press Button 1", 156, 110, 1, 85, 1)

   DO WHILE STRIG(1) <> -1

        joyx = STICK(0)

        joymax = joyx + 40
        joymin = joyx - 40
  
    LOOP

    CLS

    PAINT (0, 0), 60, 60

    CALL printg("Joystick", 160, 50, 3, 145, 1)
    CALL printg("Calibration", 158, 100, 3, 145, 1)
    CALL printg("Complete", 160, 150, 3, 145, 1)

    CALL kbhit

END IF

END SUB

SUB checkmap (flagswitch, health, points, win, dotxold, dotyold)
REM checks the map variable for anything
'ckmap = map(mapx + maxx / 2 - 1, mapy + maxy / 2 + 2)


temp = mapx + maxx / 2

IF ckmapx < 25 THEN

    ckmapx = temp - 1

ELSEIF ckmapx > 75 THEN

    ckmapx = temp + 1

END IF

ckmapx = ckmapx + 1

ckmapy = mapy + maxy / 2 + 2


ckmap = map(ckmapx, ckmapy)


IF ckmap = 20 THEN
  
    SOUND 5000, .2
   
    points = points + 1
  
    map(ckmapx, ckmapy) = 99
  
    CALL drawscreen

    IF points = win THEN
      
        IF levelnumber >= nolevels THEN

            CALL winner

        ELSE
       
            CALL nextlevel(win)
 
REM reset everything
  
            dotx = 160
            doty = 100
            dotxold = dotx
            dotyold = doty
            health = 100
            points = 0
            maxx = 18
            maxy = 18
            mapx = 18
            mapy = 15
            centerx = 110 '115
            centery = 45

            CALL status

            flagstop = 0

            CALL drawscreen

            flagstop = 1

        END IF

    END IF

END IF

IF map(ckmapx, ckmapy + 1) = 51 OR map(ckmapx, ckmapy + 1) = 50 THEN
  
    health = health - 2
  
    IF health = 0 THEN CALL ending

END IF

IF ckmap <> 70 AND ckmap <> 71 THEN

    flagswitch = 1

END IF
  
IF ckmap = 70 AND flagswitch = 1 THEN
 
    SOUND 50, .2
  
    map(ckmapx, ckmapy) = 71
   
    located = 0
  
    switchindex = 0
  
    DO WHILE located = 0
  
    located = 0
  
    switchindex = switchindex + 1
      
        IF ckmapx = switchx(switchindex) AND ckmapy = switchy(switchindex) THEN
                       
                              
            located = 1
                                          
            FOR index = 1 TO amountblock(switchindex)
              
                map(flagblockx(switchindex, index), flagblocky(switchindex, index)) = 99
          
            NEXT index
      
        END IF
  
    LOOP
  
    CALL drawscreen
  
    flagswitch = 0

ELSEIF ckmap = 71 AND flagswitch = 1 THEN
  
    SOUND 50, .2
   
    map(ckmapx, ckmapy) = 70
   
    located = 0
  
    switchindex = 0
  
    DO WHILE located = 0
  
    located = 0
  
    switchindex = switchindex + 1
      
        IF ckmapx = switchx(switchindex) AND ckmapy = switchy(switchindex) THEN
          
            located = 1
          
            FOR index = 1 TO amountblock(switchindex)
              
                map(flagblockx(switchindex, index), flagblocky(switchindex, index)) = 10
          
            NEXT index
          
        END IF
  
    LOOP
  
    CALL drawscreen
  
    flagswitch = 0

END IF

END SUB

SUB checkstick (dotxold, dotyold, wayx, wayy, land, frame, flagjump, joymax, joymin)

    i$ = INKEY$
   
    IF joystick$ = "yes" THEN
       
        joyx = STICK(0)
       
        joyy = STICK(1)
   
    END IF

    IF (joystick$ = "yes" AND joyx > joymax) OR (joystick$ = "yes" AND joyx = 0) OR i$ = "6" THEN
           
            frame = frame + 1
           
            wayx = 1
           
            IF POINT(dotx + 3, doty + 4) <> wallcolor AND POINT(dotx + 3, doty + 2) <> wallcolor AND POINT(dotx + 3, doty) <> wallcolor AND POINT(dotx + 3, doty - 2) <> wallcolor AND POINT(dotx + 3, doty - 4) <> wallcolor AND POINT(dotx + 3, doty -  _
6) <> wallcolor THEN
               
                dotx = dotx + 1
               
               
                IF dotx >= 165 THEN
                   
                    flagstop = 0
                   
                    mapx = mapx + 1
                   
                    dotx = 160

                    CALL drawscreen
                   
                END IF
              
              
            END IF
   
    ELSEIF (joystick$ = "yes" AND joyx < joymin) OR i$ = "4" THEN
   
            frame = frame - 1
           
            wayx = 0
           
            IF POINT(dotx - 3, doty + 4) <> wallcolor AND POINT(dotx - 3, doty + 2) <> wallcolor AND POINT(dotx - 3, doty) <> wallcolor AND POINT(dotx - 3, doty - 2) <> wallcolor AND POINT(dotx - 3, doty - 6) <> wallcolor AND POINT(dotx - 3, doty -  _
4) <> wallcolor THEN
               
                dotx = dotx - 1
               
               
                IF dotx <= 155 THEN
                   
                    flagstop = 0
                   
                    mapx = mapx - 1
                   
                    dotx = 160

                    CALL drawscreen
                   
                END IF
              
              
            END IF
   
    END IF
   
    IF ((joystick$ = "yes" AND STRIG(0) = -1) OR (i$ = " ")) AND land = 1 THEN
   
        flagjump = 1
   
        SOUND 1000, .2

    END IF

REM keyboard
   

    SELECT CASE UCASE$(i$)
      

REM separate controls for screen size
       
        CASE ","

            IF maxx > 6 AND maxy > 6 THEN
           
                LINE (centerx + 2, centery + 2)-(centerx + (maxx * 5) + 7, centery + (maxy * 5) + 7), 30, BF
           
                maxx = maxx - 2
           
                IF maxx < 22 THEN
               
                    maxy = maxy - 2
           
                    mapy = mapy + 1
                          
                    centery = centery + 5

                END IF
               
                mapx = mapx + 1
           
                centerx = centerx + 5
           
                LINE (centerx + 4, centery + 4)-(centerx + (maxx * 5) + 5, centery + (maxy * 5) + 5), 240, B
                LINE (centerx + 3, centery + 3)-(centerx + (maxx * 5) + 6, centery + (maxy * 5) + 6), 250, B
                LINE (centerx + 2, centery + 2)-(centerx + (maxx * 5) + 7, centery + (maxy * 5) + 7), 240, B

                flagstop = 0

            END IF
       
        CASE "."

            IF maxx < 40 THEN
           
                LINE (centerx + 2, centery + 2)-(centerx + (maxx * 5) + 7, centery + (maxy * 5) + 7), 30, BF
           
                maxx = maxx + 2
           
                IF maxy < 22 THEN

                    maxy = maxy + 2

                    mapy = mapy - 1

                    centery = centery - 5

                END IF
                
           
                mapx = mapx - 1
           
                centerx = centerx - 5
           
                LINE (centerx + 4, centery + 4)-(centerx + (maxx * 5) + 5, centery + (maxy * 5) + 5), 240, B
                LINE (centerx + 3, centery + 3)-(centerx + (maxx * 5) + 6, centery + (maxy * 5) + 6), 250, B
                LINE (centerx + 2, centery + 2)-(centerx + (maxx * 5) + 7, centery + (maxy * 5) + 7), 240, B

                flagstop = 0

            END IF
       
        CASE "Q"
           
            CLS

            PAINT (0, 0), 60, 60

            CALL printg("Thanks", 160, 20, 3, 145, 1)

            CALL printg("For", 160, 60, 3, 145, 1)

            CALL printg("Playing", 160, 100, 3, 145, 1)

            CALL printg("Jewel", 160, 140, 3, 145, 1)

            CALL printg("Hunter!", 160, 180, 3, 145, 1)

            CALL kbhit
          
            SCREEN 0
           
            END
       
        CASE "H"

                CLS
                           
                PAINT (0, 0), 60, 60

REM 3d it

                CALL printg("Instructions", 159, 19, 2, 0, 0)

                CALL printg("Instructions", 160, 20, 2, 85, 1)

                CALL printg("Use the keypad or the", 160, 40, 1, 145, 1)

                CALL printg("joystick to move", 160, 50, 1, 145, 1)

                CALL printg("left, or right.", 160, 60, 1, 145, 1)

                CALL printg("Jump with the spacebar", 160, 80, 1, 145, 1)

                CALL printg("or the A button", 160, 90, 1, 145, 1)

                CALL printg("on the joystick.", 160, 100, 1, 145, 1)

                CALL printg("All you have to do", 160, 120, 1, 145, 1)

                CALL printg("to win is get all", 160, 130, 1, 145, 1)

                CALL printg("of the", 160, 140, 1, 145, 1)

                CALL printg("JEWELS!", 160, 150, 1, 145, 1)

                CALL printg("Use < or > to", 160, 170, 1, 145, 1)

                CALL printg("change the size", 160, 180, 1, 145, 1)

                CALL printg("of the screen.", 160, 190, 1, 145, 1)

                CALL kbhit

                CALL status

                flagstop = 0

                CALL drawscreen

                flagstop = 1

       
    END SELECT

IF (i$ = "" AND joyx < joymax AND joyx > joymin) OR (joystick$ <> "yes" AND i$ = "") THEN flagstop = 1

REM checks boundaries

    IF mapx < 0 THEN mapx = 0
    IF mapx + maxx > 100 THEN mapx = mapx - 1
    IF mapy < 0 THEN mapy = 0
    IF mapy + maxy > 80 THEN mapy = mapy - 1

END SUB

SUB checkwall (wayx, wayy, land)

        IF POINT(dotx - 2, doty + 5) = 0 AND POINT(dotx + 2, doty + 5) = 0 THEN
           
            doty = doty + 1
           
            land = 0

            IF doty >= 105 THEN
               
                mapy = mapy + 1
               
                wayy = 1
               
                doty = 100
               
                flagstop = 0
               
                CALL drawscreen
           
            END IF
       
        ELSE
           
            land = 1
       
        END IF

        IF doty <= 95 THEN
           
            mapy = mapy - 1
           
            wayy = 0
           
            doty = 100
           
            flagstop = 0
           
            CALL drawscreen
       
        END IF

REM check for sliding right

    IF POINT(dotx - 1, doty + 5) = 0 AND POINT(dotx - 2, doty + 5) = wallcolor THEN

        doty = doty + 1

        dotx = dotx + 1
          
        land = 1

        IF doty >= 105 THEN
              
            mapy = mapy + 1
              
            wayy = 1
              
            doty = 100
              
            flagstop = 0
               
            CALL drawscreen
          
        END IF

        IF dotx >= 165 THEN
                  
            flagstop = 0
                  
            mapx = mapx + 1
                  
            dotx = 160

            CALL drawscreen
                  
        END IF

    END IF

REM check for sliding left

    IF POINT(dotx + 1, doty + 5) = 0 AND POINT(dotx + 2, doty + 5) = wallcolor THEN

        doty = doty + 1
       
        dotx = dotx - 1

        land = 1

        IF doty >= 105 THEN
             
            mapy = mapy + 1
             
            wayy = 1
             
            doty = 100
             
            flagstop = 0
             
            CALL drawscreen
         
        END IF

        IF dotx <= 155 THEN
                  
            flagstop = 0
                  
            mapx = mapx - 1
                  
            dotx = 160

            CALL drawscreen
                  
        END IF

    END IF


END SUB

SUB choices
REM presents the choices for the user
REM use after each menu is pulled up

    CLS

    PAINT (0, 0), 60, 60

REM 3d it

    CALL printg("Jewel Hunter", 159, 19, 2, 0, 0)

    CALL printg("Jewel Hunter", 160, 20, 2, 85, 1)

REM menu

    CALL printg(" &Begin", 160, 60, 2, 145, 1)

    CALL printg(" &Instructions", 160, 85, 2, 145, 1)

    CALL printg(" &Story", 160, 110, 2, 145, 1)

    CALL printg(" &Register", 160, 135, 2, 145, 1)

    CALL printg(" &Quit", 160, 160, 2, 145, 1)

    CALL printg("Email: jameshes@seidata.com", 160, 190, 1, 85, 1)

END SUB

SUB drawdot (dotxold, dotyold, wayx, wayy, frame)


REM feet
    IF frame = 0 THEN frame = 18
    IF frame = 19 THEN frame = 1
     
    SELECT CASE frame
        CASE 1, 2, 3
            LINE (dotx - 2, doty + 4)-(dotx, doty + 2), 170
            LINE (dotx + 2, doty + 4)-(dotx, doty + 2), 110
        CASE 4, 5, 6
            LINE (dotx - 1, doty + 4)-(dotx, doty + 2), 170
            LINE (dotx + 1, doty + 4)-(dotx, doty + 2), 110
        CASE 7, 8, 9
            LINE (dotx - 1, doty + 4)-(dotx, doty + 2), 110
            LINE (dotx + 1, doty + 4)-(dotx, doty + 2), 170
        CASE 10, 11, 12
            LINE (dotx - 2, doty + 4)-(dotx, doty + 2), 110
            LINE (dotx + 2, doty + 4)-(dotx, doty + 2), 170
        CASE 13, 14, 15
            LINE (dotx - 1, doty + 4)-(dotx, doty + 2), 110
            LINE (dotx + 1, doty + 4)-(dotx, doty + 2), 170
        CASE 16, 17, 18
            LINE (dotx - 1, doty + 4)-(dotx, doty + 2), 170
            LINE (dotx + 1, doty + 4)-(dotx, doty + 2), 110
    END SELECT


REM waist

    LINE (dotx, doty + 2)-(dotx, doty), 240

REM arms

    IF wayx = 0 THEN

        LINE (dotx, doty)-(dotx - 2, doty), 240
        PSET (dotx - 1, doty - 4), 60
    END IF

    IF wayx = 1 THEN

        LINE (dotx, doty)-(dotx + 2, doty), 240
        PSET (dotx + 1, doty - 4), 60

    END IF

REM head

    CIRCLE (dotx, doty - 4), 2, 240

    dotxold = dotx
    dotyold = doty

IF flagstop = 0 THEN CALL drawscreen

END SUB

SUB drawscreen
REM draws the screen to size with bmp's

    IF flagstop = 0 THEN

REM reads in new map when a key is hit

        grafy = centery

        FOR y = 1 TO maxy
          
            grafy = grafy + 5

            grafx = centerx

            FOR x = 1 TO maxx
              
                grafx = grafx + 5
                 

                SELECT CASE map(mapx + x, mapy + y)
                  
                    CASE 99
                        
                        PUT (grafx, grafy), blank, PSET

                    CASE 10

                        PUT (grafx, grafy), block, PSET

                    
                   
                    CASE 20
                        
                        PUT (grafx, grafy), bonus, PSET
                   
                    CASE 11
                   
                        PUT (grafx, grafy), greencross, PSET

                    CASE 12

                        PUT (grafx, grafy), redblock, PSET

                    CASE 13

                        PUT (grafx, grafy), bridge, PSET

                    CASE 40

                        PUT (grafx, grafy), hgreen, PSET

                    CASE 41

                        PUT (grafx, grafy), vgreen, PSET

                    CASE 42

                        PUT (grafx, grafy), urgreen, PSET

                    CASE 43

                        PUT (grafx, grafy), lrgreen, PSET

                    CASE 44

                        PUT (grafx, grafy), llgreen, PSET

                    CASE 45

                        PUT (grafx, grafy), ulgreen, PSET

                    CASE 46

                        PUT (grafx, grafy), greenstop, PSET
                   
                    CASE 50
                   
                        PUT (grafx, grafy), hlava, PSET
                   
                    CASE 51
                  
                        PUT (grafx, grafy), vlava, PSET

                    CASE 52

                        PUT (grafx, grafy), rlava, PSET
                   
                    CASE 60

                        PUT (grafx, grafy), rslide, PSET
                   
                    CASE 61

                        PUT (grafx, grafy), lslide, PSET
                   
                    CASE 70
                   
                        PUT (grafx, grafy), switchon, PSET
                   
                    CASE 71
                                      
                        PUT (grafx, grafy), switchoff, PSET
                   
                    CASE 80

                        PUT (grafx, grafy), hover, PSET

                    CASE 90

                        shipgrafx = grafx
                        shipgrafy = grafy
                   
                    CASE ELSE
                       
                        LINE (grafx, grafy)-(grafx + 4, grafy + 4), 0, BF
              
                END SELECT

            NEXT x
        NEXT y
  
    END IF


END SUB

SUB ending
   
    CLS

REM plot regular dots
   
    FOR t = 1 TO 1000
       
        ranx = INT(RND * 320)
       
        rany = INT(RND * 200)
       
        ranc = INT(RND * 180) + 1
       
        PSET (ranx, rany), ranc
   
    NEXT t

REM plot flashing red dots

    FOR t = 1 TO 50
   
        ranx = INT(RND * 320)
        
        rany = INT(RND * 200)
   
        ranc = INT(RND * 5) + 1
   
        PSET (ranx, rany), ranc
   
    NEXT t

REM 3d it

    CALL printg("Your", 158, 48, 5, 250, 0)
    CALL printg("Your", 160, 50, 5, 20, 1)

REM 3d it

    CALL printg("Dead", 158, 148, 5, 250, 0)
    CALL printg("Dead", 160, 150, 5, 20, 1)

REM flash 'em till ya hit something

    DO WHILE INKEY$ = ""
       
        CALL rotatecolor(rotateindex)
   
    LOOP

    CLS

    SCREEN 0

    END

END SUB

SUB erasedot (dotxold, dotyold)

    IF flagstop = 1 THEN
   
        LINE (dotxold - 2, dotyold + 4)-(dotxold + 2, dotyold - 6), 0, BF

    END IF

END SUB

SUB grabimage
grafx = 0
grafy = 0


    CLS
   
    LINE (grafx, grafy)-(grafx + 4, grafy + 4), 0, BF 'blank
                    
        GET (0, 0)-(4, 4), blank
        CLS
  
    LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor, B  'block
    LINE (grafx + 1, grafy + 1)-(grafx + 3, grafy + 3), 50, B
    PSET (grafx + 2, grafy + 2), 40

        GET (0, 0)-(4, 4), block
        CLS
                      

    LINE (grafx, grafy)-(grafx + 4, grafy + 4), 0, BF  'red bonus
    CIRCLE (grafx + 2, grafy + 2), 1, 170
    PSET (grafx + 2, grafy + 2), 1
                
        GET (0, 0)-(4, 4), bonus
        CLS

    LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor, B   'green bonus
    LINE (grafx + 1, grafy + 1)-(grafx + 3, grafy + 3), 0, BF
    CIRCLE (grafx + 2, grafy + 2), 1, 110

        GET (0, 0)-(4, 4), greencross
        CLS


    LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor, B   'red block
    LINE (grafx + 1, grafy + 1)-(grafx + 3, grafy + 3), 180
    LINE (grafx + 3, grafy + 1)-(grafx + 1, grafy + 3), 180
    PSET (grafx + 2, grafy + 1), 160
    PSET (grafx + 2, grafy + 3), 160
    PSET (grafx + 1, grafy + 2), 140
    PSET (grafx + 3, grafy + 2), 140

        GET (0, 0)-(4, 4), redblock
        CLS
  
    LINE (grafx, grafy)-(grafx + 4, grafy), 1        'horizontal lava
    LINE (grafx, grafy + 1)-(grafx + 4, grafy + 1), 2
    LINE (grafx, grafy + 2)-(grafx + 4, grafy + 2), 3
    LINE (grafx, grafy + 3)-(grafx + 4, grafy + 3), 4
    LINE (grafx, grafy + 4)-(grafx + 4, grafy + 4), 5
                   
        GET (0, 0)-(4, 4), hlava
        CLS


    LINE (grafx, grafy)-(grafx, grafy + 4), 1       'vertical lava
    LINE (grafx + 1, grafy)-(grafx + 1, grafy + 4), 2
    LINE (grafx + 2, grafy)-(grafx + 2, grafy + 4), 3
    LINE (grafx + 3, grafy)-(grafx + 3, grafy + 4), 4
    LINE (grafx + 4, grafy)-(grafx + 4, grafy + 4), 5

        GET (0, 0)-(4, 4), vlava
        CLS


                    
    LINE (grafx, grafy)-(grafx + 4, grafy + 4), 0, BF    'on
    LINE (grafx + 1, grafy + 4)-(grafx + 3, grafy + 4), 170
    LINE (grafx + 2, grafy + 3)-(grafx, grafy), 110

        GET (0, 0)-(4, 4), switchon
        CLS

  
    LINE (grafx, grafy)-(grafx + 4, grafy + 4), 0, BF   'off
    LINE (grafx + 1, grafy + 4)-(grafx + 3, grafy + 4), 170
    LINE (grafx + 2, grafy + 3)-(grafx + 4, grafy), 110
                 
        GET (0, 0)-(4, 4), switchoff
        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy), wallcolor
   LINE (grafx, grafy + 1)-(grafx + 4, grafy + 1), 90
   LINE (grafx, grafy + 2)-(grafx + 4, grafy + 2), 120
   LINE (grafx, grafy + 3)-(grafx + 4, grafy + 3), 90
   LINE (grafx, grafy + 4)-(grafx + 4, grafy + 4), wallcolor

        GET (0, 0)-(4, 4), hgreen
        CLS

   LINE (grafx, grafy)-(grafx, grafy + 4), wallcolor
   LINE (grafx + 1, grafy)-(grafx + 1, grafy + 4), 90
   LINE (grafx + 2, grafy)-(grafx + 2, grafy + 4), 120
   LINE (grafx + 3, grafy)-(grafx + 3, grafy + 4), 90
   LINE (grafx + 4, grafy)-(grafx + 4, grafy + 4), wallcolor

        GET (0, 0)-(4, 4), vgreen
        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy), wallcolor
   LINE -(grafx + 4, grafy + 4), wallcolor
  
   LINE (grafx, grafy + 1)-(grafx + 3, grafy + 1), 90
   LINE -(grafx + 3, grafy + 4), 90
  
   LINE (grafx, grafy + 2)-(grafx + 2, grafy + 2), 120
   LINE -(grafx + 2, grafy + 4), 120
  
   LINE (grafx, grafy + 3)-(grafx + 1, grafy + 3), 90
   LINE -(grafx + 1, grafy + 4), 90

   PSET (grafx, grafy + 4), wallcolor

        GET (0, 0)-(4, 4), urgreen
        CLS

   LINE (grafx + 4, grafy)-(grafx + 4, grafy + 4), wallcolor
   LINE -(grafx, grafy + 4), wallcolor

   LINE (grafx + 3, grafy)-(grafx + 3, grafy + 3), 90
   LINE -(grafx, grafy + 3), 90

   LINE (grafx + 2, grafy)-(grafx + 2, grafy + 2), 120
   LINE -(grafx, grafy + 2), 120

   LINE (grafx + 1, grafy)-(grafx + 1, grafy + 1), 90
   LINE -(grafx, grafy + 1), 90

   PSET (grafx, grafy), wallcolor

        GET (0, 0)-(4, 4), lrgreen
        CLS

   LINE (grafx, grafy)-(grafx, grafy + 4), wallcolor
   LINE -(grafx + 4, grafy + 4), wallcolor

   LINE (grafx + 1, grafy)-(grafx + 1, grafy + 3), 90
   LINE -(grafx + 4, grafy + 3), 90

   LINE (grafx + 2, grafy)-(grafx + 2, grafy + 2), 120
   LINE -(grafx + 4, grafy + 2), 120

   LINE (grafx + 3, grafy)-(grafx + 3, grafy + 1), 90
   LINE -(grafx + 4, grafy + 1), 90

   PSET (grafx + 4, grafy), wallcolor

        GET (0, 0)-(4, 4), llgreen
        CLS

   LINE (grafx + 4, grafy)-(grafx, grafy), wallcolor
   LINE -(grafx, grafy + 4), wallcolor

   LINE (grafx + 4, grafy + 1)-(grafx + 1, grafy + 1), 90
   LINE -(grafx + 1, grafy + 4), 90

   LINE (grafx + 4, grafy + 2)-(grafx + 2, grafy + 2), 120
   LINE -(grafx + 2, grafy + 4), 120

   LINE (grafx + 4, grafy + 3)-(grafx + 3, grafy + 3), 90
   LINE -(grafx + 3, grafy + 4), 90

   PSET (grafx + 4, grafy + 4), wallcolor

        GET (0, 0)-(4, 4), ulgreen

        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor, B
   LINE (grafx + 1, grafy + 1)-(grafx + 3, grafy + 3), 90, B
   PSET (grafx + 2, grafy + 2), 120

        GET (0, 0)-(4, 4), greenstop

        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy + 2), wallcolor, B
   PSET (grafx + 1, grafy + 1), 3
   PSET (grafx + 2, grafy + 1), 3
   PSET (grafx + 3, grafy + 1), 3

        GET (0, 0)-(4, 4), bridge

        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor
   LINE -(grafx, grafy + 4), wallcolor
   LINE -(grafx, grafy), wallcolor
   PSET (grafx + 1, grafy + 2), 120
   PSET (grafx + 1, grafy + 3), 90
   PSET (grafx + 2, grafy + 3), 120
       
        GET (0, 0)-(4, 4), rslide

        CLS

    LINE (grafx + 4, grafy)-(grafx, grafy + 4), wallcolor
    LINE -(grafx + 4, grafy + 4), wallcolor
    LINE -(grafx + 4, grafy), wallcolor
    PSET (grafx + 3, grafy + 2), 120
    PSET (grafx + 3, grafy + 3), 90
    PSET (grafx + 2, grafy + 3), 120

        GET (0, 0)-(4, 4), lslide

        CLS

    PSET (grafx, grafy), 100
    PSET (grafx + 1, grafy), 110
    PSET (grafx + 2, grafy), 120
    PSET (grafx + 3, grafy), 110
    PSET (grafx + 4, grafy), 100
    PSET (grafx, grafy + 1), 40
    PSET (grafx + 1, grafy + 1), 50
    PSET (grafx + 2, grafy + 1), 60
    PSET (grafx + 3, grafy + 1), 50
    PSET (grafx + 4, grafy + 1), 40

        GET (0, 0)-(4, 4), hover

        CLS

   LINE (grafx, grafy)-(grafx + 4, grafy + 4), wallcolor
   LINE -(grafx, grafy + 4), wallcolor
   LINE -(grafx, grafy), wallcolor
   PSET (grafx + 1, grafy + 2), 120
   PSET (grafx + 1, grafy + 3), 90
   PSET (grafx + 2, grafy + 3), 120
 
   PSET (grafx + 1, grafy), 5
   PSET (grafx + 2, grafy + 1), 4
   PSET (grafx + 3, grafy + 2), 3
   PSET (grafx + 4, grafy + 3), 2
      
        GET (0, 0)-(4, 4), rlava

        CLS



END SUB

SUB ideas
REM ideas for future versions


REM ideas***
'put a shooting cannon that can be on top or on bottom
'(just shoots up,down,left,right(to save speed))
'gfx 9 and ?

'weight sensitive blocks
'(13)
'***
'example 4 ships
'check for any ships on the map that is drawn
'put a 1 in the shiparray if true
'separate sub
'if shiparray(lcv) =1 then
'   if point(shiparrayx(lcv)-2,shiparrayy(lcv)-1) then
'       shiparrayx(lcv)=shiparrayx(lcv) -1


REM palette calculation (future use)
'  COLOR number = 65536 * blue + 256 * green + red
REM palette calculation (future use)

END SUB

SUB iniletter
REM ini letters

REM tell the user its loading the fonts

    COLOR 250
 
    LOCATE 2, 1
 
    PRINT "Loading Fonts"

    FOR index = 1 TO 6080  '6016
 
        READ letter(index)
 
    NEXT index



END SUB

SUB jump (jumpcount, flagjump)

IF flagjump = 1 THEN
  
    doty = doty - 1

    jumpcount = jumpcount + 1

    IF POINT(dotx, doty - 7) = wallcolor OR POINT(dotx - 2, doty - 7) = wallcolor OR POINT(dotx + 2, doty - 7) = wallcolor THEN
  
        jumpcount = 0
  
        flagjump = 0
  
    END IF

    doty = doty - 1


    IF jumpcount = 26 THEN
  
        jumpcount = 0
  
        flagjump = 0

    END IF

END IF

END SUB

SUB kbhit
REM waits for input

    IF UCASE$(joystick$) <> "YES" THEN
   
        DO WHILE INKEY$ = "": LOOP

    ELSE

        DO WHILE INKEY$ = "" AND STRIG(1) <> -1: LOOP

    END IF
   
    CLS

END SUB

SUB makecolors
REM makes color values
   
    index = 0
    blue = 0
    green = 0
    red = 0

    COLOR 250

    LOCATE 1, 1

    PRINT "Loading Palette"

   
REM special case
    FOR red = 40 TO 60 STEP 4
        index = index + 1
        value(index) = 65536 * blue + 256 * green + red
   NEXT red

    red = 0
    FOR blue = 7 TO 63
        index = index + 1
        value(index) = 65536 * blue + 256 * green + red
    NEXT blue

    blue = 0
    green = 0
    red = 0
  
    FOR green = 1 TO 63
        index = index + 1
        value(index) = 65536 * blue + 256 * green + red
    NEXT green

    blue = 0
    green = 0
    red = 0

    FOR red = 1 TO 63
        index = index + 1
        value(index) = 65536 * blue + 256 * green + red
    NEXT red

    FOR black = 1 TO 63
        index = index + 1
        value(index) = 65536 * black + 256 * black + black
    NEXT black

END SUB

SUB makepalette
REM makes palette

    FOR index = 1 TO 256
   
        PALETTE (index), (value(index))

    NEXT index

END SUB

SUB menu
REM beginning menu with the registering info

    CALL choices

    i$ = INKEY$

    done = 0

    DO WHILE done = 0

        i$ = INKEY$

        DO WHILE i$ = ""

            i$ = INKEY$

        LOOP

        SELECT CASE UCASE$(i$)

            CASE "B"

                CLS

                done = 1

            CASE "I"

                CLS
                            
                PAINT (0, 0), 60, 60

REM 3d it

                CALL printg("Instructions", 159, 19, 2, 0, 0)

                CALL printg("Instructions", 160, 20, 2, 85, 1)

                CALL printg("Use the keypad or the", 160, 40, 1, 145, 1)

                CALL printg("joystick to move", 160, 50, 1, 145, 1)

                CALL printg("left, or right.", 160, 60, 1, 145, 1)

                CALL printg("Jump with the spacebar", 160, 80, 1, 145, 1)

                CALL printg("or the A button", 160, 90, 1, 145, 1)

                CALL printg("on the joystick.", 160, 100, 1, 145, 1)

                CALL printg("All you have to do", 160, 120, 1, 145, 1)

                CALL printg("to win is get all", 160, 130, 1, 145, 1)

                CALL printg("of the", 160, 140, 1, 145, 1)

                CALL printg("JEWELS!", 160, 150, 1, 145, 1)

                CALL printg("Use < or > to", 160, 170, 1, 145, 1)

                CALL printg("change the size", 160, 180, 1, 145, 1)

                CALL printg("of the screen.", 160, 190, 1, 145, 1)

                CALL kbhit

                CALL choices

            CASE "S"

                CLS

                PAINT (0, 0), 60, 60

REM 3d it

                CALL printg("Story", 159, 19, 2, 0, 0)

                CALL printg("Story", 160, 20, 2, 85, 1)

                CALL printg("You are an", 160, 40, 1, 145, 1)

                CALL printg("archeologist and", 160, 50, 1, 145, 1)

                CALL printg("you were sent", 160, 60, 1, 145, 1)

                CALL printg("out to find the", 160, 70, 1, 145, 1)

                CALL printg("lost jewels of", 160, 80, 1, 145, 1)

                CALL printg("the Rain Forest.", 160, 90, 1, 145, 1)

                CALL printg("Legend has it", 160, 100, 1, 145, 1)

                CALL printg("that they were", 160, 110, 1, 145, 1)

                CALL printg("spread out all", 160, 120, 1, 145, 1)

                CALL printg("over the World,", 160, 130, 1, 145, 1)

                CALL printg("but in very secret", 160, 140, 1, 145, 1)

                CALL printg("places.", 160, 150, 1, 145, 1)

                CALL printg("All you have to do", 160, 160, 1, 145, 1)

                CALL printg("is find them all!", 160, 170, 1, 145, 1)

                CALL printg("HAPPY HUNTING!", 160, 190, 2, 145, 1)

                CALL kbhit

                CALL choices

            CASE "R"

                CLS

                PAINT (0, 0), 60, 60

                CALL printg("Jewel Hunter", 160, 50, 2, 145, 1)

                CALL printg("is only", 160, 100, 3, 145, 1)

                CALL printg("$2", 160, 150, 4, 145, 1)

                CALL kbhit

                PAINT (0, 0), 60, 60

REM 3d it

                CALL printg("Register Me!", 159, 19, 2, 0, 0)
               
                CALL printg("Register Me!", 160, 20, 2, 85, 1)

                CALL printg("Its very CHEAP and", 160, 40, 1, 145, 1)

                CALL printg("and EASY to register", 160, 50, 1, 145, 1)

                CALL printg("Jewel Hunter", 160, 60, 1, 145, 1)

                CALL printg("Just send $2 to:", 160, 70, 1, 145, 1)

                CALL printg("John Hess", 160, 80, 1, 145, 1)

                CALL printg("5999 St. Rt. 48", 160, 90, 1, 145, 1)

                CALL printg("Lawrenceburg IN  47025", 160, 100, 1, 145, 1)

                CALL printg("I'll send it to you", 160, 110, 1, 145, 1)

                CALL printg("via the internet,", 160, 120, 1, 145, 1)

                CALL printg("so make sure you leave", 160, 130, 1, 145, 1)

                CALL printg("your email address!", 160, 140, 1, 145, 1)

                CALL printg("HAPPY HUNTING", 160, 150, 1, 145, 1)

                CALL printg("Please email me if", 160, 160, 1, 145, 1)

                CALL printg("you plan to register", 160, 170, 1, 145, 1)

                CALL printg("Jewel Hunter or have", 160, 180, 1, 145, 1)

                CALL printg("any comments!", 160, 190, 1, 145, 1)

                CALL kbhit

                PAINT (0, 0), 60, 60

                CALL printg("Please email", 160, 50, 2, 145, 1)

                CALL printg("me at:", 160, 100, 2, 145, 1)

                CALL printg("jamesehes@seidata.com", 160, 150, 1, 145, 1)

                CALL kbhit

                CALL choices

            CASE "Q"

                CLS

                PAINT (0, 0), 60, 60

                CALL printg("Thanks", 160, 20, 3, 145, 1)

                CALL printg("For", 160, 60, 3, 145, 1)

                CALL printg("Playing", 160, 100, 3, 145, 1)

                CALL printg("Jewel", 160, 140, 3, 145, 1)

                CALL printg("Hunter!", 160, 180, 3, 145, 1)

                CALL kbhit

                SCREEN 0

                END

        END SELECT

    LOOP


END SUB

SUB moveship
   
    IF POINT(shipgrafx + shipx + 3, shipgrafy + 5) <> wallcolor THEN

        shipwayx = 0

                       
    ELSEIF POINT(shipgrafx + shipx - 3, shipgrafy + 5) <> wallcolor THEN

        shipwayx = 1

    END IF

    IF shipwayx = 1 THEN shipx = shipx + 1

    IF shipwayx = 0 THEN shipx = shipx - 1

    CIRCLE (shipgrafx + shipxold, shipgrafy), 3, 0

    CIRCLE (shipgrafx + shipx, shipgrafy), 3, 110

    shipxold = shipx

END SUB

SUB nextlevel (win)
REM loads the next level

REM clear the screen and paint blue
   
    CLS

    PAINT (0, 0), 60, 60

REM display the level

    levelnumber = levelnumber + 1

    CALL printg("Congratulations", 160, 30, 2, 135, 1)

    CALL printg("You are", 160, 60, 2, 85, 1)

    CALL printg("now entering", 160, 100, 2, 85, 1)

    CALL printg("LEVEL", 160, 140, 2, 85, 1)

REM 3d it

    CALL printg(STR$(levelnumber) + " ", 160, 179, 4, 10, 0)
   
    CALL printg(STR$(levelnumber) + " ", 161, 180, 4, 85, 1)

    CALL kbhit

    CALL readmap(win)

END SUB

SUB printg (sentence$, x, y, scale, c, flagshade)
REM prints graphical characters

REM finds the length of the sentence
  
    length = LEN(sentence$)

REM find the center x position
  
    x = x - (length * 10 * (scale / 2)) + (scale * 2)
  
REM find the center y position

    y = y - (scale * 5)

REM save time

    widthscale = 8 * scale

REM loop until you get to the end of the sentence

                         
    lcv = 0

    DO WHILE lcv < length

    lcv = lcv + 1

REM place the color into newc
  
        newc = c

REM find new letter
  
        letter$ = MID$(sentence$, lcv, 1)

        IF letter$ = "&" THEN

            lcv = lcv + 1

            letter$ = MID$(sentence$, lcv, 1)
 
            newc = 15

        END IF

REM find spot in array

        index = (ASC(letter$) - 33) * 64
  
        indexold = index

        IF letter$ <> " " THEN

REM loop for the y scale
      
            FOR ypos = 1 TO widthscale STEP scale
      
REM option for shading
              
                IF flagshade = 1 THEN
          
                    newc = newc + 5
      
                END IF

REM main scale loop
    
                FOR times = 1 TO scale
      
REM x scale loop
                  
                    FOR xpos = 1 TO widthscale STEP scale
                  
REM shading option 2
                      
                        IF flagshade = 2 THEN
                      
                            newc = newc + 1
                      
                        END IF

REM find next pixel
                      
                        index = index + 1
          
REM if pixel is lit then draw it
                      
                        IF letter(index) <> 0 THEN
                          
                            LINE (xpos + x, ypos + y)-(xpos + x + scale, ypos + y), newc
                      
                        END IF
      
                    NEXT xpos
          
                    IF flagshade = 2 THEN
              
                        newc = c
          
                    END IF
    
REM reset index
                  
                    index = index - 8
          
                    ypos = ypos + 1
    
                NEXT times
    
                index = index + 8
    
                ypos = ypos - scale
      
            NEXT ypos
  
        END IF
  
        x = x + (10 * scale)

       

    LOOP



END SUB

SUB readmap (win)
REM ini first 20 and last 20(pad them)
  
REM ini variables

    switchindex = 0
   
    amountswitch = 0
  
    win = 0
   
    FOR y = 1 TO 80
       
        FOR x = 1 TO 100
           
            map(x, y) = 10  '51
       
        NEXT x
   
    NEXT y

    FOR y = 21 TO 60

        FOR x = 21 TO 80
           
            READ map(x, y)

REM checks for bonus items

            IF map(x, y) = 20 THEN win = win + 1

REM checks for switches

            IF map(x, y) = 70 OR map(x, y) = 71 THEN
               
                switchindex = switchindex + 1
               
                switchx(switchindex) = x
               
                switchy(switchindex) = y
               
                amountswitch = amountswitch + 1
           
            END IF
            
REM checks for ships
           
        NEXT x

    NEXT y

    switchindex = 1
   
    FOR switchindex = 1 TO amountswitch
   
        READ amountblock(switchindex)
   
        FOR index = 1 TO amountblock(switchindex)
      
            READ flagblockx(switchindex, index)
       
            READ flagblocky(switchindex, index)
   
        NEXT index

    NEXT switchindex

END SUB

SUB rotatecolor (rotateindex)
REM rotates red
REM rotates the outside blocks

    rotateindex = rotateindex + 1
    IF rotateindex > 5 THEN rotateindex = 1

    SWAP value(rotateindex), value(rotateindex + 1)

    PALETTE (rotateindex), (value(rotateindex))

END SUB

SUB score (points, health, win)

    LOCATE 23, 6

    PRINT points

    LOCATE 23, 33

    PRINT health

    LOCATE 23, 19

    PRINT win - points

END SUB

SUB status
REM status

REM colors of columns

    dark = 230
    medium = 240
    light = 250

    CLS

REM 3d columns

REM top

    LINE (0, 0)-(319, 0), dark
    LINE (0, 1)-(319, 1), medium
    LINE (0, 2)-(319, 2), light
    LINE (0, 3)-(319, 3), medium
    LINE (0, 4)-(319, 4), dark

REM bottom

    LINE (0, 195)-(319, 195), dark
    LINE (0, 196)-(319, 196), medium
    LINE (0, 197)-(319, 197), light
    LINE (0, 198)-(319, 198), medium
    LINE (0, 199)-(319, 199), dark

REM left

    LINE (0, 0)-(0, 199), dark
    LINE (1, 1)-(1, 198), medium
    LINE (2, 2)-(2, 197), light
    LINE (3, 3)-(3, 196), medium
    LINE (4, 4)-(4, 195), dark

REM right

    LINE (319, 0)-(319, 199), dark
    LINE (318, 1)-(318, 198), medium
    LINE (317, 2)-(317, 197), light
    LINE (316, 3)-(316, 196), medium
    LINE (315, 4)-(315, 195), dark

REM bar under UNREGISTERED!

    LINE (5, 27)-(314, 27), dark
    LINE (4, 28)-(315, 28), medium
    LINE (3, 29)-(316, 29), light
    LINE (4, 30)-(315, 30), medium
    LINE (5, 31)-(314, 31), dark

REM cross bar

    LINE (5, 158)-(314, 158), dark
    LINE (4, 159)-(315, 159), medium
    LINE (3, 160)-(316, 160), light
    LINE (4, 161)-(315, 161), medium
    LINE (5, 162)-(314, 162), dark

REM first down cross bar

    LINE (95, 163)-(95, 194), dark
    LINE (96, 162)-(96, 195), medium
    LINE (97, 161)-(97, 196), light
    LINE (98, 162)-(98, 195), medium
    LINE (99, 163)-(99, 194), dark

REM second down cross bar

    LINE (220, 163)-(220, 194), dark
    LINE (221, 162)-(221, 195), medium
    LINE (222, 161)-(222, 196), light
    LINE (223, 162)-(223, 195), medium
    LINE (224, 163)-(224, 194), dark

REM jewel bar

    LINE (40, 31)-(40, 158), dark
    LINE (41, 30)-(41, 159), medium
    LINE (42, 29)-(42, 160), light
    LINE (43, 30)-(43, 159), medium
    LINE (44, 31)-(44, 158), dark

REM hunter bar

    LINE (279, 31)-(279, 158), dark
    LINE (278, 30)-(278, 159), medium
    LINE (277, 29)-(277, 160), light
    LINE (276, 30)-(276, 159), medium
    LINE (275, 31)-(275, 158), dark

REM fill in the holes

REM UNREGISTERED!
   
    PAINT (5, 5), 50, dark

REM Main Body

    PAINT (45, 32), 30, dark

REM jewel box

    PAINT (5, 32), 40, dark

REM hunter box

    PAINT (314, 32), 40, dark

REM bottom half

    PAINT (5, 163), 50, dark
    PAINT (100, 163), 50, dark
    PAINT (225, 163), 50, dark

REM 3d it

    CALL printg("UNREGISTERED!", 159, 18, 2, 0, 0)

    CALL printg("UNREGISTERED!", 160, 19, 2, 145, 1)
   
REM bottom half

    CALL printg("Jewels", 50, 170, 1, 150, 1)
   
    CALL printg("Health", 270, 170, 1, 150, 1)

    CALL printg("Jewels Left", 159, 170, 1, 150, 1)

REM side letters
REM jewel
REM 3d it(draw it twice)
 
    CALL printg("J", 19, 49, 2, 0, 0)
    CALL printg("e", 19, 72, 2, 0, 0)
    CALL printg("w", 19, 95, 2, 0, 0)
    CALL printg("e", 19, 118, 2, 0, 0)
    CALL printg("l", 19, 141, 2, 0, 0)
   
   
    CALL printg("J", 20, 50, 2, 85, 1)
    CALL printg("e", 20, 73, 2, 85, 1)
    CALL printg("w", 20, 96, 2, 85, 1)
    CALL printg("e", 20, 119, 2, 85, 1)
    CALL printg("l", 20, 142, 2, 85, 1)

REM hunter
REM 3d it (draw it twice)

    CALL printg("H", 294, 49, 2, 0, 0)
    CALL printg("u", 294, 67, 2, 0, 0)
    CALL printg("n", 294, 85, 2, 0, 0)
    CALL printg("t", 294, 103, 2, 0, 0)
    CALL printg("e", 294, 121, 2, 0, 0)
    CALL printg("r", 294, 141, 2, 0, 0)
  
    CALL printg("H", 295, 50, 2, 85, 1)
    CALL printg("u", 295, 68, 2, 85, 1)
    CALL printg("n", 295, 86, 2, 85, 1)
    CALL printg("t", 295, 104, 2, 85, 1)
    CALL printg("e", 295, 122, 2, 85, 1)
    CALL printg("r", 295, 142, 2, 85, 1)

REM Jewels Blank Space

    LINE (23, 174)-(79, 184), 0, BF
    LINE (23, 174)-(79, 184), 60, B

REM Jewels Left Blank Space

    LINE (107, 174)-(213, 184), 0, BF
    LINE (107, 174)-(213, 184), 60, B

REM Health Blank Space

    LINE (243, 174)-(300, 184), 0, BF
    LINE (243, 174)-(300, 184), 60, B
   
REM border around playing window
   
    LINE (centerx + 4, centery + 4)-(centerx + (maxx * 5) + 5, centery + (maxy * 5) + 5), 240, B
    LINE (centerx + 3, centery + 3)-(centerx + (maxx * 5) + 6, centery + (maxy * 5) + 6), 250, B
    LINE (centerx + 2, centery + 2)-(centerx + (maxx * 5) + 7, centery + (maxy * 5) + 7), 240, B

END SUB

SUB title
REM title

    PAINT (0, 0), 60, 60

REM 3d it by drawing 2 in diff positions
   
    CALL printg("Jewel", 158, 53, 4, 200, 0)
    CALL printg("Jewel", 159, 55, 4, 80, 1)

    CALL printg("Hunter", 158, 123, 4, 200, 0)
    CALL printg("Hunter", 159, 125, 4, 80, 1)
   
REM 3d it
   
    CALL printg("By: John Hess", 159, 179, 2, 200, 0)
    CALL printg("By: John Hess", 160, 180, 2, 1, 0)

    IF UCASE$(joystick$) <> "YES" THEN
  
        DO WHILE INKEY$ = ""
            
            CALL rotatecolor(rotateindex)
       
        LOOP

    ELSE

        DO WHILE INKEY$ = "" AND STRIG(1) <> -1
       
            CALL rotatecolor(rotateindex)
       
        LOOP

    END IF
  
    CLS

END SUB

SUB winner
REM winning screen

    CLS

    PAINT (0, 0), 60, 60

    CALL printg("You Found", 160, 50, 2, 135, 1)

    CALL printg("All of the", 160, 100, 2, 135, 1)

    CALL printg("JEWELS!", 160, 150, 3, 135, 1)

    CALL kbhit

    PAINT (0, 0), 60, 60

    CALL printg("To See The Real Ending", 160, 30, 1, 135, 1)

    CALL printg("And To Play All Of The", 160, 40, 1, 135, 1)

    CALL printg("Levels. You Must REGISTER", 160, 50, 1, 135, 1)

    CALL printg("Jewel Hunter", 160, 70, 2, 135, 1)

    CALL printg("IT ONLY COSTS", 160, 100, 2, 85, 1)

    CALL printg("$2.00", 160, 135, 5, 85, 1)

    CALL printg("Just go to the", 160, 160, 1, 135, 1)

    CALL printg("REGISTERING menu", 160, 170, 1, 135, 1)

    CALL printg("when the game starts", 160, 180, 1, 135, 1)

    CALL printg("to see how!", 160, 190, 1, 135, 1)

    CALL kbhit

    END

END SUB

